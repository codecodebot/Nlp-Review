# -*- coding: utf-8 -*-
"""NLP_Review_Flask.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1THKrje7FA9JKgZyt82LA7oAWvVFwTE31
"""

from flask import Flask, request, render_template_string
import matplotlib.pyplot as plt
import io
import base64
from nltk.sentiment.vader import SentimentIntensityAnalyzer
import nltk

nltk.download('vader_lexicon')
analyzer = SentimentIntensityAnalyzer()

app = Flask(__name__)

html = '''
<!doctype html>
<title>리뷰 분석기</title>
<h1>리뷰 기반 점수 계산</h1>
<form method=post>
  리뷰 텍스트: <input type=text name=review><br>
  실제 별점 (0~5): <input type=number name=actual_rating step=0.1><br>
  사용자 평균 별점: <input type=number name=user_avg_rating step=0.1><br>
  매장 평균 별점: <input type=number name=store_avg_rating step=0.1><br>
  유사 매장 평균 별점: <input type=number name=similar_stores_avg_rating step=0.1><br>
  <input type=submit value=분석>
</form>

{% if result %}
  <h2>분석 결과</h2>
  <p>조정된 가중치: {{ result.adjusted_user_weight }}</p>
  <p>최종 계산된 점수: {{ result.final_score }}</p>
  <img src="data:image/png;base64,{{ result.plot_data }}">
{% endif %}
'''

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        review = request.form['review']
        actual_rating = float(request.form['actual_rating'])
        user_avg_rating = float(request.form['user_avg_rating'])
        store_avg_rating = float(request.form['store_avg_rating'])
        similar_stores_avg_rating = float(request.form['similar_stores_avg_rating'])

        score = analyzer.polarity_scores(review)['compound']
        sentiment_score = round((score + 1) * 2.5, 2)
        adjusted_user_weight = user_avg_rating / similar_stores_avg_rating
        final_score = (sentiment_score * 0.5) + \
                      (store_avg_rating * 0.25) + \
                      (user_avg_rating * 0.25 * adjusted_user_weight)
        final_score = round(final_score, 2)

        # 시각화
        plt.figure(figsize=(6, 4))
        plt.bar(['Actual Rating'], [actual_rating], color='red', alpha=0.4, label='Actual Rating')
        plt.bar(['Final Score'], [final_score], color='blue', alpha=0.6, label='Calculated Score')
        plt.ylim(0, 5)
        plt.ylabel('Score (0-5)')
        plt.title('Actual vs Calculated')
        plt.legend()
        plt.tight_layout()

        img = io.BytesIO()
        plt.savefig(img, format='png')
        img.seek(0)
        plot_data = base64.b64encode(img.getvalue()).decode()
        plt.close()

        return render_template_string(html, result={
            'adjusted_user_weight': round(adjusted_user_weight, 3),
            'final_score': final_score,
            'plot_data': plot_data
        })

    return render_template_string(html)

if __name__ == '__main__':
    import os
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port)